{"version":3,"sources":["../../src/commands/lerna-version.ts"],"sourcesContent":["import { spawnSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { Command, Flags } from '@oclif/core';\nimport chalk from 'chalk';\nimport prettier from 'prettier';\n\nimport { getShellForPlatform } from '@newrade/core-node-utils';\n\nimport { debugInstance, enableDebug, NS } from '../utilities/log.utilities.js';\n\ntype PackageJsonWorkspaces =\n  | {\n      workspaces?: {\n        packages?: string[];\n      };\n    }\n  | undefined;\n\n/**\n * Command that execute `lerna version` but let the user include only the packages to version bump\n *\n * To include only packages prefixed with my-org-* in a release, run:\n *\n * ```bash\n * lerna-version --packages=my-org/*\n * ```\n *\n * which is equivalent to set the workspaces temporarily as:\n * ```json\n * \"workspaces\": {\n *   \"packages\": [\n *     \"packages/my-org/*\"\n *   ]\n * },\n * ```\n *\n * Once the command is finished or cancelled the `workspaces.packages` prop will be set back to its original value\n */\nexport default class LernaVersion extends Command {\n  log = debugInstance(`${NS}:lerna`);\n  logWarn = debugInstance(`${NS}:lerna:warn`);\n  logError = debugInstance(`${NS}:lerna:error`);\n\n  static description =\n    'Wrapper for lerna version command, allowing to run version on specific packages';\n\n  static examples = [`$ nr lerna-version`];\n\n  static args = [{ name: 'args' }];\n\n  static flags = {\n    packages: Flags.string({\n      description: 'packages glob to be included in lerna version bump, e.g. --packages=packages/*',\n      required: true,\n    }),\n  };\n\n  async run() {\n    enableDebug();\n    const { args, flags } = await this.parse(LernaVersion);\n\n    this.log(`running in ${process.cwd()}`);\n\n    try {\n      /**\n       *\n       * Prettier\n       *\n       */\n\n      const prettierOptions = await prettier.resolveConfig(\n        path.join(process.cwd(), '.prettierrc'),\n        { useCache: false, editorconfig: true }\n      );\n      function format(str: string): string {\n        return prettier.format(str, {\n          ...prettierOptions,\n          parser: 'json-stringify',\n        });\n      }\n\n      /**\n       *\n       * Command\n       *\n       */\n\n      this.log(`reading package.json's workspaces config`);\n\n      const packageJsonFilePath = path.resolve(process.cwd(), 'package.json');\n      const packageJsonFile = fs.readFileSync(packageJsonFilePath, {\n        encoding: 'utf8',\n      });\n      const packageJson = JSON.parse(packageJsonFile) as PackageJsonWorkspaces;\n\n      if (!packageJson?.workspaces?.packages?.length) {\n        this.logWarn(`missing packages in package.workspaces, aborting command`);\n        return;\n      }\n      this.log(`replacing workspace.packages value with: ${chalk.greenBright(flags.packages)}`);\n\n      const temporaryPackageJson = JSON.stringify(\n        {\n          ...packageJson,\n          workspaces: { packages: [flags.packages] },\n        } as PackageJsonWorkspaces,\n        null,\n        2\n      );\n\n      fs.writeFileSync(packageJsonFilePath, format(temporaryPackageJson));\n\n      this.log(`updating index for package.json as --assume-unchanged`);\n\n      assumeUnchanged('package.json');\n\n      this.log(`executing lerna version`);\n\n      const command = spawnSync(`yarn lerna version ${args.args || ''}`, {\n        shell: getShellForPlatform(),\n        stdio: 'inherit',\n        env: process.env,\n      });\n\n      this.log(`restoring original package.json`);\n\n      fs.writeFileSync(packageJsonFilePath, format(JSON.stringify(packageJson, null, 2)), {\n        encoding: 'utf8',\n      });\n\n      this.log(`updating index for package.json as --no-assume-unchanged`);\n\n      unAssumeUnchanged('package.json');\n    } catch (error: any) {\n      this.logError(`error occured, aborting: ${error}`);\n      this.log(`updating index for package.json as --no-assume-unchanged`);\n      unAssumeUnchanged('package.json');\n    }\n\n    function assumeUnchanged(filename: string) {\n      spawnSync(`git update-index --assume-unchanged ${filename}`, {\n        shell: getShellForPlatform(),\n        stdio: 'inherit',\n        env: process.env,\n      });\n    }\n\n    function unAssumeUnchanged(filename: string) {\n      spawnSync(`git update-index --no-assume-unchanged ${filename}`, {\n        shell: getShellForPlatform(),\n        stdio: 'inherit',\n        env: process.env,\n      });\n    }\n  }\n}\n"],"names":["LernaVersion","Command","log","debugInstance","NS","logWarn","logError","description","examples","args","name","flags","packages","Flags","string","required","run","enableDebug","parse","process","cwd","packageJson","prettierOptions","prettier","resolveConfig","path","join","useCache","editorconfig","format","str","parser","packageJsonFilePath","resolve","packageJsonFile","fs","readFileSync","encoding","JSON","workspaces","length","chalk","greenBright","temporaryPackageJson","stringify","writeFileSync","assumeUnchanged","command","spawnSync","shell","getShellForPlatform","stdio","env","unAssumeUnchanged","error","filename"],"mappings":"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"}