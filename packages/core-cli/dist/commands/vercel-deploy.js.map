{"version":3,"sources":["../../src/commands/vercel-deploy.ts"],"sourcesContent":["import { spawnSync } from 'child_process';\n\nimport { Command, Flags } from '@oclif/core';\nimport debug from 'debug';\nimport * as t from 'io-ts';\n\nimport { loadDotEnv } from '@newrade/core-node-utils';\nimport { getShellForPlatform } from '@newrade/core-node-utils';\n\nimport { NS } from '../utilities/log.utilities.js';\n\nexport type ENV = t.TypeOf<typeof Env>;\nexport const Env = t.intersection([\n  t.type({}),\n  t.type({\n    VERCEL_PROJECT_ID: t.string,\n    VERCEL_ORG_ID: t.string,\n    VERCEL_TOKEN: t.string,\n    VERCEL_SCOPE: t.string,\n  }),\n]);\n\nexport default class VercelDeploy extends Command {\n  log = debug(`${NS}:vercel-deploy`);\n  logWarn = debug(`${NS}:vercel-deploy:warn`);\n  logError = debug(`${NS}:vercel-deploy:error`);\n\n  static description = 'deploy site with vercel using env variables';\n\n  static examples = [`$ nr vercel-deploy`];\n\n  static flags = {\n    help: Flags.help({ char: 'h' }),\n  };\n\n  static args = [];\n\n  async init() {}\n\n  async run() {\n    this.log(`running in ${process.cwd()}`);\n    this.log('validating env variables');\n    this.log('loading .env file');\n\n    const env = loadDotEnv<ENV>({\n      schema: Env,\n      dotEnvPath: '.env',\n      dotEnvRootPath: '../../.env',\n      packageName: 'core-cli',\n    });\n\n    this.log('running vercel deploy');\n\n    // use yarn to use the locally installed vercel-cli\n    spawnSync(`yarn vercel public --token $VERCEL_TOKEN --scope $VERCEL_SCOPE --confirm`, {\n      cwd: '.',\n      shell: getShellForPlatform(),\n      stdio: 'inherit',\n      env: env,\n    });\n\n    this.log('done! âœ…');\n  }\n}\n"],"names":["t","VercelDeploy","Command","log","debug","NS","logWarn","logError","description","examples","flags","help","Flags","char","args","init","run","process","cwd","env","loadDotEnv","schema","Env","dotEnvPath","dotEnvRootPath","packageName","spawnSync","shell","getShellForPlatform","stdio","intersection","type","VERCEL_PROJECT_ID","string","VERCEL_ORG_ID","VERCEL_TOKEN","VERCEL_SCOPE"],"mappings":"AAAA;;;;;AAA0B,IAAA,aAAe,WAAf,eAAe,CAAA;AAEV,IAAA,KAAa,WAAb,aAAa,CAAA;AAC1B,IAAA,MAAO,kCAAP,OAAO,EAAA;AACbA,IAAAA,CAAC,mCAAM,OAAO,EAAb;AAEc,IAAA,cAA0B,WAA1B,0BAA0B,CAAA;AAGlC,IAAA,eAA+B,WAA/B,+BAA+B,CAAA;AAanC,MAAMC,YAAY,SAASC,KAAO,QAAA;IAC/CC,GAAG,GAAGC,CAAAA,GAAAA,MAAK,AAAuB,CAAA,QAAvB,CAAC,CAAC,EAAEC,eAAE,GAAA,CAAC,cAAc,CAAC,CAAC,CAAC;IACnCC,OAAO,GAAGF,CAAAA,GAAAA,MAAK,AAA4B,CAAA,QAA5B,CAAC,CAAC,EAAEC,eAAE,GAAA,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAC5CE,QAAQ,GAAGH,CAAAA,GAAAA,MAAK,AAA6B,CAAA,QAA7B,CAAC,CAAC,EAAEC,eAAE,GAAA,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAE9C,OAAOG,WAAW,GAAG,6CAA6C,CAAC;IAEnE,OAAOC,QAAQ,GAAG;QAAC,CAAC,kBAAkB,CAAC;KAAC,CAAC;IAEzC,OAAOC,KAAK,GAAG;QACbC,IAAI,EAAEC,KAAK,MAAA,CAACD,IAAI,CAAC;YAAEE,IAAI,EAAE,GAAG;SAAE,CAAC;KAChC,CAAC;IAEF,OAAOC,IAAI,GAAG,EAAE,CAAC;IAEjB,MAAMC,IAAI,GAAG,EAAE;IAEf,MAAMC,GAAG,GAAG;QACV,IAAI,CAACb,GAAG,CAAC,CAAC,WAAW,EAAEc,OAAO,CAACC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,CAACf,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACrC,IAAI,CAACA,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAE9B,MAAMgB,GAAG,GAAGC,CAAAA,GAAAA,cAAU,AAKpB,CAAA,WALoB,CAAM;YAC1BC,MAAM,EAAEC,GAAG;YACXC,UAAU,EAAE,MAAM;YAClBC,cAAc,EAAE,YAAY;YAC5BC,WAAW,EAAE,UAAU;SACxB,CAAC,AAAC;QAEH,IAAI,CAACtB,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAElC,mDAAmD;QACnDuB,CAAAA,GAAAA,aAAS,AAKP,CAAA,UALO,CAAC,CAAC,wEAAwE,CAAC,EAAE;YACpFR,GAAG,EAAE,GAAG;YACRS,KAAK,EAAEC,CAAAA,GAAAA,cAAmB,AAAE,CAAA,oBAAF,EAAE;YAC5BC,KAAK,EAAE,SAAS;YAChBV,GAAG,EAAEA,GAAG;SACT,CAAC,CAAC;QAEH,IAAI,CAAChB,GAAG,CAAC,cAAS,CAAC,CAAC;KACrB;CACF;kBAzCoBF,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAV1B,MAAMqB,GAAG,GAAGtB,CAAC,CAAC8B,YAAY,CAAC;IAChC9B,CAAC,CAAC+B,IAAI,CAAC,EAAE,CAAC;IACV/B,CAAC,CAAC+B,IAAI,CAAC;QACLC,iBAAiB,EAAEhC,CAAC,CAACiC,MAAM;QAC3BC,aAAa,EAAElC,CAAC,CAACiC,MAAM;QACvBE,YAAY,EAAEnC,CAAC,CAACiC,MAAM;QACtBG,YAAY,EAAEpC,CAAC,CAACiC,MAAM;KACvB,CAAC;CACH,CAAC,AAAC;QARUX,GAAG,GAAHA,GAAG"}