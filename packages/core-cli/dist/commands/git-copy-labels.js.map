{"version":3,"sources":["../../src/commands/git-copy-labels.ts"],"sourcesContent":["import { Command, Flags } from '@oclif/core';\nimport chalk from 'chalk';\nimport debug from 'debug';\nimport * as t from 'io-ts';\nimport { Octokit } from 'octokit';\n\nimport { loadDotEnv } from '@newrade/core-node-utils';\n\nimport { NS } from '../utilities/log.utilities.js';\n\nexport type ENV = t.TypeOf<typeof Env>;\nexport const Env = t.intersection([\n  t.type({}),\n  t.type({\n    GH_TOKEN: t.string,\n  }),\n]);\n\nexport default class GitCopyLabels extends Command {\n  log = debug(`${NS}:git-copy-labels`);\n  logWarn = debug(`${NS}:git-copy-labels:warn`);\n  logError = debug(`${NS}:git-copy-labels:error`);\n\n  static description = 'copy labels from a repo to another';\n\n  static examples = [`$ nr git-copy-labels`];\n\n  static flags = {\n    help: Flags.help({ char: 'h' }),\n  };\n\n  static args = [\n    { name: 'source', description: 'source repo <org-name>/<repo-name>', required: true },\n    { name: 'destination', description: 'destination repo <org-name>/<repo-name>', required: true },\n  ];\n\n  async init() {\n    debug.enable('nr:core-cli:*');\n  }\n\n  async run() {\n    const { args, flags } = await this.parse(GitCopyLabels);\n\n    this.log('validating inputs');\n\n    const { source, destination } = args;\n    const [sourceOrg, sourceRepo] = source.split('/');\n    const [destinationOrg, destinationRepo] = destination.split('/');\n\n    this.log(`source owner: \\t\\t ${chalk.blue(sourceOrg)}`);\n    this.log(`source repo:  \\t\\t ${chalk.blue(sourceRepo)}`);\n\n    this.log(`destination owner: \\t ${chalk.green(destinationOrg)}`);\n    this.log(`destination repo:  \\t ${chalk.green(destinationRepo)}`);\n\n    if (!(sourceOrg && sourceRepo && destinationOrg && destinationRepo)) {\n      this.logError('please double check inputs');\n      return;\n    }\n\n    this.log('loading .env file');\n\n    const env = loadDotEnv<ENV>({\n      schema: Env,\n      dotEnvPath: '.env',\n      dotEnvRootPath: '../../.env',\n      packageName: 'core-cli',\n    });\n\n    if (!env.GH_TOKEN) {\n      this.logError('missing env GH_TOKEN');\n    }\n\n    this.log('validate credentials');\n\n    const octokit = new Octokit({ auth: env.GH_TOKEN });\n\n    this.log(`retrieve repo labels for: ${sourceOrg}/${sourceRepo}`);\n\n    let sourceLabels;\n\n    try {\n      sourceLabels = await octokit.rest.issues.listLabelsForRepo({\n        owner: sourceOrg,\n        repo: sourceRepo,\n      });\n\n      if (!sourceLabels.data.length) {\n        this.logError('could not retrieve labels');\n        return;\n      }\n\n      this.log(`got ${sourceLabels.data.length} labels`);\n\n      sourceLabels.data.forEach((label) => {\n        this.log(`found label: ${label.name}`);\n      });\n    } catch (error: any) {\n      this.logError('could not retrieve labels');\n      return;\n    }\n\n    this.log(`retrieve repo labels for: ${destinationOrg}/${destinationRepo}`);\n\n    try {\n      const destinationLabels = await octokit.rest.issues.listLabelsForRepo({\n        owner: destinationOrg,\n        repo: destinationRepo,\n      });\n\n      this.log(`got ${destinationLabels.data.length} labels in destination repo`);\n\n      this.log(`creating new labels...`);\n\n      await Promise.all(\n        sourceLabels.data.map(async (sourceLabel) => {\n          const existingLabel = destinationLabels.data.find(\n            (destinationLabel) => destinationLabel.name === sourceLabel.name\n          );\n\n          if (existingLabel) {\n            this.log(`updating existing label: ${existingLabel.name}`);\n\n            return await octokit.rest.issues.updateLabel({\n              owner: destinationOrg,\n              repo: destinationRepo,\n              name: sourceLabel.name,\n              color: sourceLabel.color,\n            });\n          }\n\n          this.log(`creating new label: ${sourceLabel.name}`);\n\n          return await octokit.rest.issues.createLabel({\n            owner: destinationOrg,\n            repo: destinationRepo,\n            name: sourceLabel.name,\n            color: sourceLabel.color,\n          });\n        })\n      );\n    } catch (error: any) {\n      this.logError('could not peform the action');\n      this.logError(error);\n      return;\n    }\n\n    this.log('done! âœ…');\n  }\n}\n"],"names":["t","GitCopyLabels","Command","log","debug","NS","logWarn","logError","description","examples","flags","help","Flags","char","args","name","required","init","enable","run","parse","source","destination","sourceOrg","sourceRepo","split","destinationOrg","destinationRepo","chalk","blue","green","env","loadDotEnv","schema","Env","dotEnvPath","dotEnvRootPath","packageName","GH_TOKEN","octokit","Octokit","auth","sourceLabels","rest","issues","listLabelsForRepo","owner","repo","data","length","forEach","label","error","destinationLabels","Promise","all","map","sourceLabel","existingLabel","find","destinationLabel","updateLabel","color","createLabel","intersection","type","string"],"mappings":"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"}